<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://juhuawong.github.io</id>
    <title>Jason&apos;s Notes</title>
    <updated>2020-05-17T02:56:28.018Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://juhuawong.github.io"/>
    <link rel="self" href="https://juhuawong.github.io/atom.xml"/>
    <subtitle>记录工作心得</subtitle>
    <logo>https://juhuawong.github.io/images/avatar.png</logo>
    <icon>https://juhuawong.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Jason&apos;s Notes</rights>
    <entry>
        <title type="html"><![CDATA[ROS之多线程的使用]]></title>
        <id>https://juhuawong.github.io/post/ros-zhi-duo-xian-cheng-de-shi-yong/</id>
        <link href="https://juhuawong.github.io/post/ros-zhi-duo-xian-cheng-de-shi-yong/">
        </link>
        <updated>2020-05-17T02:51:45.000Z</updated>
        <content type="html"><![CDATA[<p>完成日期：2020-05-16</p>
<h2 id="0-概述">0 概述</h2>
<h3 id="1背景">（1）背景</h3>
<p>在初学ROS的时候，官方wiki上常用2种方式进入循环（<code>spin()</code>和<code>spinOnce()</code>)，定时调用我们注册的回调函数，在回调函数中更新数据。假设一个场景：</p>
<p>一个控制或者融合模块，接收3个传感器的数据并需要将处理后的数据通过Topic发出，其中有1个传感器的更新周期比较大。</p>
<p>如果使用单线程的<code>spin()</code>或者<code>spinOnce()</code>方法对回调函数进行控制，会拖慢整个系统的运行速度，可以自行做实验验证，每个回调函数中使用<code>sleep()</code>方法延时1s，观察整个系统的输出。</p>
<h3 id="2多线程的使用">（2）多线程的使用</h3>
<p>多线程的方式可以解决上述问题，ROS做了大量的工作，使我们可以通过2种方式方式开启多个线程：</p>
<pre><code class="language-c++">ros::MultiThreadedSpinner
ros::AsyncSpinner
</code></pre>
<h2 id="1-rosmultithreadedspinner">1 <strong>ros::MultiThreadedSpinner</strong></h2>
<p><code>MultiThreadedSpinner</code>类似于<code>ros::spin()</code>，在构造过程中可以指定它所用线程数，但如果不指定线程数或者线程数设置为0，它将在每个cpu内核开辟一个线程。</p>
<p>基本的使用方法：</p>
<pre><code class="language-c++">ros::MultiThreadedSpinner spinner(4); // Use 4 threads 
spinner.spin(); //spin() will not return until the node has been shutdown
</code></pre>
<p>使用此方法需要注意的是<code>spinner.spin()</code>后面的代码将不会再执行，因此后面放了逻辑代码也不会执行了。</p>
<h2 id="2-rosasyncspinner">2 <strong>ros::AsyncSpinner</strong></h2>
<p>一个更好的选择是<code>AsyncSpinner</code>,与阻塞型的<code>spin()</code>不同，它有<code>start()</code>和<code>stop()</code>方法，并且再销毁的时候自动停止，与上面的 <code>MultiThreadedSpinner</code> 等价的例子：</p>
<pre><code class="language-C++">ros::AsyncSpinner spinner(4); // Use 4 threads
spinner.start();
ros::waitForShutdown();
</code></pre>
<h2 id="3-我常用的方式">3 我常用的方式</h2>
<p>wiki上只介绍到上面的例子，按照上面的例子可以达到多线程接收的目的，但是还需要发送Topic，可以按照下面的方法实现：</p>
<pre><code class="language-c++">ros::AsyncSpinner spinner(4); // Use 4 threads
spinner.start();
//上面会开启4个线程，且线程已经开始工作，下面就是在主线程中循环发送消息
ros::Rate loop_rate(100);
while(ros::ok())
{
    publishMessage();//需要进行逻辑处理的函数，本处以发送消息为例
    loop_rate.sleep();
}
</code></pre>
<p>另外，还可以自己封装类，类中还可以包含线程。</p>
<h2 id="4-参考">4 参考</h2>
<blockquote>
<ol>
<li>[http://wiki.ros.org/roscpp/Overview/Callbacks%20and%20Spinning](http://wiki.ros.org/roscpp/Overview/Callbacks and Spinning)</li>
<li>https://blog.csdn.net/tobebest_lah/article/details/103050076</li>
</ol>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ROS开发工具篇（1）——配置两台（多台）电脑使之通讯]]></title>
        <id>https://juhuawong.github.io/post/ros-kai-fa-gong-ju-pian-1-pei-zhi-liang-tai-duo-tai-dian-nao-shi-zhi-tong-xun/</id>
        <link href="https://juhuawong.github.io/post/ros-kai-fa-gong-ju-pian-1-pei-zhi-liang-tai-duo-tai-dian-nao-shi-zhi-tong-xun/">
        </link>
        <updated>2020-05-15T15:21:55.000Z</updated>
        <content type="html"><![CDATA[<h2 id="0-总览">0 总览</h2>
<p>最近的项目中基于Linux+ROS组合开发相关的功能，碰到在2台电脑之间进行ROS message信息交换的需要，现简单记录一下我实现的过程。</p>
<h3 id="目标">目标：</h3>
<p>在2台电脑之间实现ROS数据通讯，例如在主机运行了roscore以后，在从机中能接收到主机的ROS message。</p>
<h3 id="名词解释">名词解释：</h3>
<p>主机：简单理解就是需要运行roscore的电脑（ros master主节点运行在其上）；</p>
<p>从机：除主机以外的其他机器。</p>
<h3 id="示例">示例：</h3>
<p>有2台电脑：</p>
<p>主机的IP地址为<strong>192.168.2.202</strong>，名称（hostname)为<strong>tegra-ubuntu</strong>；</p>
<p>从机的IP地址为<strong>192.168.2.107</strong>，名称（hostname)为<strong>wjh-ubuntu</strong>。</p>
<p>注意：本方法在两台电脑位于同一个局域网的情况下测试通过，未在同一局域网时未通过。</p>
<p>查看IP地址和hostname的方法是在终端下输入相关指令：</p>
<p><code>$ifconfig</code></p>
<p><code>$hostname</code></p>
<h2 id="1-ros-master节点主机配置">1 ROS master节点主机配置</h2>
<p>按照前述示例，主机的IP为192.168.2.202，hostname为tegra-ubuntu</p>
<h3 id="修改hosts文件">修改hosts文件</h3>
<p><code>$ sudo gedit /etc/hosts</code></p>
<p>注意：是hosts文件，而不是host。</p>
<p>在hosts文件中注册网络中从机的IP地址和名称，格式为：IP+TAB+从机hostname，本例中为：</p>
<p>192.168.2.107	wjh-ubuntu</p>
<p>如果有多台从机，可以将从机的信息都注册在/etc/hosts文件.</p>
<h3 id="重启网络">重启网络</h3>
<p><code>$sudo /etc/init.d/networking restart</code></p>
<p>也可以重启电脑（万能的重启！）。</p>
<h2 id="2-ros从机配置">2 ROS从机配置</h2>
<p>从机的/etc/hosts文件配置与主机类似，添加主机的IP地址和名称。</p>
<h3 id="修改hosts文件-2">修改hosts文件</h3>
<p><code>$ sudo gedit /etc/hosts</code></p>
<p>192.168.2.202	tegra-ubuntu</p>
<p>如果有多台从机，但是由于主机只有1台，因此所有的从机都是添加上述IP地址和hostname。</p>
<figure data-type="image" tabindex="1"><img src="https://i.loli.net/2020/05/15/wzDWgK5fI37yZiL.png" alt="从机hosts文件配置" loading="lazy"></figure>
<h3 id="重启网络-2">重启网络</h3>
<p>与上述方式一致，不再赘述。</p>
<h3 id="修改~bashrc文件">修改*~/.bashrc*文件</h3>
<p><code>$sudo gedit ~/.bashrc</code></p>
<p>在文档最下面添加</p>
<p><code>export ROS_HOSTNAME=tegra-ubuntu</code></p>
<p><code>export ROS_MASTER_URI=http://tegra-ubuntu：11311</code></p>
<figure data-type="image" tabindex="2"><img src="https://i.loli.net/2020/05/15/tHNhi5elDsb9Opf.png" alt="从机bashrc配置" loading="lazy"></figure>
<p>添加完成后，注销或者重启。</p>
<h2 id="ssh方式登录ros主机">ssh方式登录ROS主机</h2>
<p>上述步骤完成之后就能实现ROS主机与多台从机之间的通信了，但是当我们愉快地在从机上编写代码调试时，要用U盘来回在2台电脑之间拷贝程序是一件很麻烦的事情，所以还得通过ssh登录远程主机进行程序拷贝、同步和运行节点。</p>
<h3 id="安装openssh-server">安装openssh-server</h3>
<p><code>$sudo apt-get install openssh-server</code></p>
<p>详细的ssh安装和服务开启可以自行查找，这里只提一下思路。</p>
<p>ssh服务OK了以后可以登录试试，登录的方式为</p>
<p><code>$ssh 账号@ip</code></p>
<p>例如</p>
<p><code>$ssh nvidia@192.168.2.202</code></p>
<p>输入账号对应的密码即可登录了，登录之后可以通过scp指令在两台电脑之间互相拷贝文件，运行主机上的roscore或者其他的ROS功能节点，在从机上就能收到ros topic了。</p>
<p><em>这里需要提一下，如果在从机上执行<code>rostopic echo topic_name</code>操作时可能会提示消息为建立，那是因为需要在工作空间中先进行source操作。</em></p>
<figure data-type="image" tabindex="3"><img src="https://i.loli.net/2020/05/15/yC2Pvxnf4MBcWG8.png" alt="ssh登录" loading="lazy"></figure>
<figure data-type="image" tabindex="4"><img src="https://i.loli.net/2020/05/15/Dl8Lmf2ybIwJohc.png" alt="ssh登录成功" loading="lazy"></figure>
<p>以上，就可以把主机装车，传感器都接上，在从机上愉快敲代码了，下一步讲配合vscode在线调试程序。</p>
]]></content>
    </entry>
</feed>